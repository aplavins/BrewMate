#include <Wire.h>
#include <LiquidCrystal.h>

#define   button1 8           //definitions
#define   cooler  9
#define   heater  10
#define   buzzer  13 
#define   CONTRAST_PIN   9
#define   BACKLIGHT_PIN  7
LiquidCrystal lcd(12, 11, 5, 4, 3, 2, BACKLIGHT_PIN, POSITIVE );

float tempC;                  // floating point variable for the temperature in celcius
float tempF;                  // floating point variable for the temperature in farenheit
int reading;                  // the adc value from the temperature sensor
int lastReading;              // the stored last value of reading
int avgReading;               // the average value of reading to smooth the output
int tempPin = 0;              // The analog pin that the temp sensor is connected to
int type = 0;                 // a variable to set the mode the controller is running in
int lastType = 0;             // the stored last value of type
int buttonState;              // the current reading from the input pin
int lastButtonState = LOW;    // the previous reading from the input pin
int a = 0;                    // variable for recording when a still run has completed

long lastDebounceTime = 0;    // the last time the output pin was toggled
long debounceDelay = 50;      // the debounce time; increase if the output flickers

const int lagerMIN = 7;       // a constant for the minumum value in deg C for fermenting lager wort
const int lagerMAX = 13;      // a constant for the maximum value in deg C for fermenting lager wort
const int aleMIN = 20;        // a constant for the minumum value in deg C for fermenting ale wort
const int aleMAX = 22;        // a constant for the maximum value in deg C for fermenting ale wort
const int swMIN = 20;         // a constant for the minumum value in deg C for fermenting sugar wash
const int swMAX = 35;         // a constant for the minumum value in deg C for fermenting sugar wash
const int maxTemp = 105;      // a constant for the maximum value in deg C for the temperature sensor (to protect the analog pin from over volt)

/*
 * Normal ale fermentation temperatures range from 68 to 72 째F (20 to 22 째C)
 * and lager fermentation temperatures from 45 to 55 째F (7 to 13 째C). 
 * Also keep in mind that the heat generated by an active fermentation can
 * warm a typical 5-gallon (19-L) batch of beer by 10 to 15 degrees
 * Fahrenheit (5.5 to 8.3 degrees Celsius).
 * 
 * Still:
 * Once the still is up to temperature, and the distillate has started dripping,
 * make sure you throw away the first 50 mL per 20 L of wash, as this may contain
 * any methanol that is present.
 * 
 * You should expect to collect the equivalent of approx 1L of 40% alcohol
 * per kg of sugar used; the actual % purity will depend on the type of still
 * you are using.
 * 
 * Stop collecting the distillate once you notice them containing some fusels,
 * or if the temperature gets above about 94 oC (it doesn't become "dangerous"
 * or "deadly", just that it tastes foul).
 * 
 * If you collect the distillate in small amounts (say 1/2 L or so),
 * you can segregate the drinkable spirit from that with fusels in; the latter
 * can be added to the next wash, and be collected cleanly then.
 * 
 * The alcohols in the wash begin to vapourise from the wash around specific temperatures.
 * If by themselves they would be ...
 * 
 * Acetone 56.5C (134F)                       
 * Methanol (wood alcohol) 64C (147F)          (Foreshots)
 * Ethyl acetate 77.1C (171F)                  (Heads)
 * Ethanol 78C (172F) <----------------------- First cut (Hearts)
 * 2-Propanol (rubbing alcohol) 82C (180F)<--- Second Cut (Tails)
 * 87.7C (190F)  <---------------------------- Third Cut (End)
 * 1-Propanol 97C (207F)
 * Water 100C (212F)
 * Butanol 116C (241F)
 * Amyl alcohol 137.8C (280F)
 * Furfural 161C (322F)
 */

void setup()                        // run once
{
  //Serial.begin(9600);               // for debugging but slows the program
  analogReference(INTERNAL);        // use 1.1V reference to get better resolution from the temperature sensor        
  pinMode(button1, INPUT);          // set the button pin as an input
  pinMode(cooler, OUTPUT);          // set the cooler pin as an output
  pinMode(heater, OUTPUT);          // set the heater pin as an output
  pinMode(buzzer, OUTPUT);          // set the buzzer pin as an output
  digitalWrite(cooler, LOW);        // set the cooler pin LOW
  digitalWrite(heater, LOW);        // set the heater pin LOW
  digitalWrite(buzzer, LOW);        // set the buzzer pin LOW
  lcd.begin(16,2);                  // initialize the lcd 
  lcd.backlight();                  // turn on the lcd backlight
  lcd.clear();                      // clear the lcd screen
}

void loop(){                                               // main loop
  
  int button = digitalRead(button1);                       // button debouncing
  if (button != lastButtonState) {                         // if the button state has changed
    lastDebounceTime = millis();                           // reset the debouncing timer
  }

  if ((millis() - lastDebounceTime) > debounceDelay) {     // if it's been longer than the debounce delay
    if (button != buttonState) {                           // if the button is in a different state than the stored vaiable
      buttonState = button;                                // store the new button state in buttonState
      if (buttonState == 1) {                              // if the button is depressed
        if (type < 5){                                     // if type is less than 5
          type++;                                          // increase type by 1
        }else{                                             // if type is 5 or more
          type = 0;                                        // loop type back to 0
        }
      }
    }
  }
  
  reading = analogRead(tempPin);                           // store the adc value of the temp sensor in reading
  avgReading = (reading + lastReading) / 2;                // average the reading to smooth it out
  tempC = avgReading / 9.31;                               // devide the smoothed adc value by a factor to get deg C
  tempF = (tempC * 1.8) + 32;                              // use the deg C value to calculate deg F
  
  
  if (type != lastType){                                   // if we are on a new screen
    lcd.clear();                                           // clear the screen
  }
  
  if (tempC >= maxTemp){                                   // if tempC is higher than the maxTemp
    digitalWrite(heater, LOW);                             // turn off the heater
    type = 6;                                              // go into error mode (until the button is pressed again)
  }
  
  switch (type) {                                          // a switch for the different modes of the controller
    case 0:                                                // mode 0 is a temperature monitor with no controls
      //monitor
      digitalWrite(heater, LOW);                           // turn off the heater
      digitalWrite(cooler, LOW);                           // turn off the cooler
      lcd.home ();                                         // set the lcd cursor to the home position
      lcd.print("Temperature:");                           // print to the lcd
      lcd.setCursor ( 0, 1 );                              // go to the next line
      lcd.print (tempC);                                   // print variable to the lcd
      lcd.print ("C   ");                                  // print to the lcd
      lcd.setCursor ( 8, 1 );                              // set the cursor
      lcd.print (tempF);                                   // print variable to the lcd
      lcd.print ("F ");                                    // print to the lcd
    break;                                                 // end of this mode
    
    case 1:                                                // mode 1 is just like mode 0 but lets you know when the temperature is in the range of pitching yeast 
      //pitching
      digitalWrite(heater, LOW);                           // turn off the heater
      digitalWrite(cooler, LOW);                           // turn off the cooler
      lcd.home ();                                         // set the lcd cursor to the home position
      lcd.print("Pitching:");                              // print to the lcd
      lcd.setCursor ( 0, 1 );                              // go to the next line
      lcd.print (tempC);                                   // print variable to the lcd
      lcd.print ("C   ");                                  // print to the lcd
      lcd.setCursor ( 8, 1 );                              // set the cursor
      lcd.print (tempF);                                   // print variable to the lcd
      lcd.print ("F ");                                    // print to the lcd
      if ((reading < 326) && (reading > 195)){             // if the reading is between 21 C and 35 C
        lcd.setCursor ( 9, 0 );                            // set the cursor
        lcd.print ("Pitch! ");                             // print to the lcd
      }
      else if (reading > 326) {                            // if the reading is above 35 C
        lcd.setCursor ( 9, 0 );                            // set the cursor
        lcd.print ("Too Hot");                             // print to the lcd
      }
      else if (reading < 195) {                            // if the reading is below 21 C
        lcd.setCursor ( 9, 0 );                            // set the cursor
        lcd.print ("TooCold");                             // print to the lcd
      }
    break;                                                 // end of this mode
    
    case 2:                                                // mode 2 is a fermentation temperature controller for lager with heating and cooling
      //lager
      lcd.home ();                                         // set the lcd cursor to the home position
      lcd.print("Lager:");                                 // print to the lcd
      lcd.setCursor ( 0, 1 );                              // go to the next line
      lcd.print (tempC);                                   // print variable to the lcd
      lcd.print ("C   ");                                  // print to the lcd
      lcd.setCursor ( 8, 1 );                              // set the cursor
      lcd.print (tempF);                                   // print variable to the lcd
      lcd.print ("F ");                                    // print to the lcd
      if (tempC > lagerMAX){                               // if temp C is higher than the reccomended max temp for a lager
        lcd.setCursor ( 7, 0 );                            // set the cursor
        lcd.print ("Too Hot");                             // print to the lcd
        digitalWrite(cooler, HIGH);                        // turn the cooler on
        digitalWrite(heater, LOW);                         // turn the heater off
        }
      else if (tempC < lagerMIN){                          // if temp C is lower than the reccomended min temp for a lager
        lcd.setCursor ( 7, 0 );                            // set the cursor
        lcd.print ("Too Cold");                            // print to the lcd
        digitalWrite(heater, HIGH);                        // turn the heater on
        digitalWrite(cooler, LOW);                         // turn the cooler off
      }
      else {                                               // if the other conditions aren't satisfied (the temp is in the goldilocks zone)
        lcd.setCursor ( 7, 0 );                            // set the cursor
        lcd.print ("All Good");                            // print to the lcd
        digitalWrite(cooler, LOW);                         // turn the cooler off
        digitalWrite(heater, LOW);                         // turn the heater off
      }
    break;                                                 // end of this mode
    
    case 3:                                                // mode 3 is a fermentation temperature controller for ale with heating and cooling
      //ale
      lcd.home ();
      lcd.print("Ale:");  
      lcd.setCursor ( 0, 1 );        // go to the next line
      lcd.print (tempC); 
      lcd.print ("C   ");  
      lcd.setCursor ( 8, 1 ); 
      lcd.print (tempF); 
      lcd.print ("F ");
      if (tempC > aleMAX){
        lcd.setCursor ( 5, 0 );
        lcd.print ("Too Hot");
        digitalWrite(cooler, HIGH);
        digitalWrite(heater, LOW);
        }
      else if (tempC < aleMIN){
        lcd.setCursor ( 5, 0 );
        lcd.print ("Too Cold");
        digitalWrite(heater, HIGH);
        digitalWrite(cooler, LOW);
      }
      else {
        lcd.setCursor ( 5, 0 );
        lcd.print ("All Good");
        digitalWrite(cooler, LOW);
        digitalWrite(heater, LOW);
      }
    break;
    case 4:
      //sugar wash
      lcd.home ();                   // go home
      lcd.print("Wash:");  
      lcd.setCursor ( 0, 1 );        // go to the next line
      lcd.print (tempC); 
      lcd.print ("C   ");  
      lcd.setCursor ( 8, 1 ); 
      lcd.print (tempF); 
      lcd.print ("F ");
      if (tempC > swMAX){
        lcd.setCursor ( 6, 0 );
        lcd.print ("Too Hot");
        digitalWrite(cooler, HIGH);
        digitalWrite(heater, LOW);
        }
      else if (tempC < swMIN){
        lcd.setCursor ( 6, 0 );
        lcd.print ("Too Cold");
        digitalWrite(heater, HIGH);
        digitalWrite(cooler, LOW);
      }
      else {
        lcd.setCursor ( 6, 0 );
        lcd.print ("All Good");
        digitalWrite(cooler, LOW);
        digitalWrite(heater, LOW);
      }
    break;
    case 5:
      //Distilling
      digitalWrite(cooler, LOW);
      lcd.home ();                   // go home
      lcd.print("Still: ");  
      lcd.setCursor ( 0, 1 );        // go to the next line
      lcd.print (tempC); 
      lcd.print ("C   ");  
      lcd.setCursor ( 8, 1 ); 
      lcd.print (tempF); 
      lcd.print ("F ");
      if ((reading < 876) && (a == 0)){
        lcd.setCursor ( 7, 0 );
        lcd.print ("Heating");
        digitalWrite(heater, HIGH);
      }
      else{
        lcd.clear();
        lcd.home ();                   // go home
        lcd.print ("All the Booze");
        lcd.setCursor ( 0, 1 );        // go to the next line
        lcd.print ("is gone man!");
        a=1;
        digitalWrite(heater, LOW);
      }
      if ((lastReading < 526) && (reading >= 526)){
        lcd.clear();
        lcd.home ();                   // go home
        lcd.print ("Beginning of");
        lcd.setCursor ( 0, 1 );        // go to the next line
        lcd.print ("Heads");
        digitalWrite(buzzer, HIGH);
        delay(1000);
        digitalWrite(buzzer, LOW);
      }
      else if ((lastReading < 726) && (reading >= 726)){
        lcd.clear();
        lcd.home ();                   // go home
        lcd.print ("Beginning of");
        lcd.setCursor ( 0, 1 );        // go to the next line
        lcd.print ("Hearts");
        digitalWrite(buzzer, HIGH);
        delay(1000);
        digitalWrite(buzzer, LOW);
        delay(1000);
        digitalWrite(buzzer, HIGH);
        delay(1000);
        digitalWrite(buzzer, LOW);
      }
      else if ((lastReading < 763) && (reading >= 763)){
        lcd.clear();
        lcd.home ();                   // go home
        lcd.print ("Beginning of");
        lcd.setCursor ( 0, 1 );        // go to the next line
        lcd.print ("Tails");
        digitalWrite(buzzer, HIGH);
        delay(500);
        digitalWrite(buzzer, LOW);
        delay(200);
        digitalWrite(buzzer, HIGH);
        delay(500);
        digitalWrite(buzzer, LOW);
        delay(1000);
        digitalWrite(buzzer, HIGH);
        delay(500);
        digitalWrite(buzzer, LOW);
        delay(200);
        digitalWrite(buzzer, HIGH);
        delay(500);
        digitalWrite(buzzer, LOW);
      }
      else if ((lastReading < 816) && (reading >= 816)){
        lcd.clear();
        lcd.home ();                   // go home
        lcd.print ("Final Cut");
        lcd.setCursor ( 0, 1 );        // go to the next line        
        lcd.print ("End of Tails");
        digitalWrite(buzzer, HIGH);
        delay(1000);
        digitalWrite(buzzer, LOW);
        delay(500);
        digitalWrite(buzzer, HIGH);
        delay(1000);
        digitalWrite(buzzer, LOW);
        delay(500);
        digitalWrite(buzzer, HIGH);
        delay(1000);
        digitalWrite(buzzer, LOW);
      }
    break;
    case 6:
      //max temp
      digitalWrite(buzzer, HIGH);
      lcd.home();
      lcd.print("Max Temp Reached!:");  
      lcd.setCursor ( 0, 1 );        // go to the next line
      lcd.print (tempC); 
      lcd.print ("C");  
    break;
    default:
      lcd.home();
      lcd.print("Somethings Wrong");
      lcd.setCursor ( 0, 1 );
      lcd.print("Type overflow");
    break;
}

lastType = type;
lastButtonState = button;
lastReading = reading;
delay(5);
}
